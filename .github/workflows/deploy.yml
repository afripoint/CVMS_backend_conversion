name: Build, Test, Scan, and Deploy

on:
  push:
    branches:
      - DevOps-CVM

env:
  # Global environment variables with explicit defaults
  DJANGO_SETTINGS_MODULE: api.settings
  DATABASE_ENGINE: django.db.backends.sqlite3
  DATABASE_NAME: db.sqlite3
  ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0
  EMAIL_HOST: smtp.gmail.com
  EMAIL_PORT: 587
  EMAIL_USE_TLS: True
  DEBUG: True

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'  # Enable pip caching

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Create necessary directories and files
      - name: Setup Django environment
        run: |
          mkdir -p logs
          touch logs/debug.log
          python manage.py check --deploy

      # Run tests with explicit database configuration
      - name: Run tests
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
        run: |
          python manage.py makemigrations --check --dry-run
          python manage.py test --keepdb

  code-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install scanning tools
        run: |
          pip install bandit flake8 safety

      - name: Run security scans
        run: |
          bandit -r . -ll --exclude */tests/*,*/migrations/*
          safety check
          flake8 . --max-line-length=120 --exclude=*/migrations/*,env/*

  build-and-push:
    runs-on: ubuntu-latest
    needs: code-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push web service
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-web:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-web:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-web:buildcache,mode=max

      - name: Build and push Nginx service
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-nginx:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-nginx:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-nginx:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          COMPOSE_PROJECT_NAME: cvms
        run: |
          echo "Ensuring deployment directory exists..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            mkdir -p ~/cvms
          '
          
          echo "Copying docker-compose file..."
          scp docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/cvms/
          
          echo "Deploying services..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd ~/cvms
            docker-compose pull
            docker-compose down --remove-orphans
            docker-compose up -d
            docker system prune -f
          '
