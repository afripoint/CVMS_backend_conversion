name: Build, Test, Scan, and Deploy

on:
  push:
    branches:
      - DevOps-CVM

env:
  DJANGO_SETTINGS_MODULE: api.settings
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup directory structure
        run: |
          mkdir -p static
          mkdir -p staticfiles
          mkdir -p media
          mkdir -p templates
          echo "Created directory structure"
          ls -la

      - name: Setup Database and Static Files
        run: |
          chmod -R 755 static staticfiles media templates
          python manage.py makemigrations accounts
          python manage.py makemigrations departments
          python manage.py makemigrations verifications
          python manage.py makemigrations vins_search
          python manage.py migrate
          touch static/.gitkeep
          python manage.py collectstatic --noinput
          echo "Static files collection completed"
          ls -la staticfiles/

      - name: Run tests
        run: python manage.py test

  code-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install scanning tools
        run: pip install bandit flake8 safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -ll --exclude */tests/*,*/migrations/* -o bandit_results.txt || echo "Bandit found issues"
        continue-on-error: true

      - name: Run Safety dependency check
        run: |
          safety check -o safety_results.txt || echo "Safety found vulnerabilities"
        continue-on-error: true

      - name: Run Flake8 linting
        run: |
          flake8 . --max-line-length=120 --exclude=*/migrations/*,env/* > flake8_results.txt || echo "Flake8 found style issues"
        continue-on-error: true

      - name: Upload scan results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            bandit_results.txt
            safety_results.txt
            flake8_results.txt
          if-no-files-found: warn

  build-and-push:
    runs-on: ubuntu-latest
    needs: code-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Setup Python and static files
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare static files
        run: |
          pip install -r requirements.txt
          mkdir -p static staticfiles
          touch static/.gitkeep
          python manage.py collectstatic --noinput

      - name: Build and push web service
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-web:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-web:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-web:buildcache,mode=max

      - name: Build and push Nginx service
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-nginx:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-nginx:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/cvms_backend_conversion-nginx:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Copy docker-compose.yml *before* setting up directories on the server
      - name: Copy docker-compose.yml
        run: scp docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/cvms/

      - name: Set up directories on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            mkdir -p ~/cvms/static
            mkdir -p ~/cvms/staticfiles
            mkdir -p ~/cvms/media
            mkdir -p ~/cvms/templates
          '

      - name: Deploy services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd ~/cvms
            docker-compose pull
            docker-compose down --remove-orphans
            docker-compose up -d
            docker system prune -f
          '
